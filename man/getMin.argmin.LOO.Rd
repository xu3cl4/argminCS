% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_minimum.R
\name{getMin.argmin.LOO}
\alias{getMin.argmin.LOO}
\title{Compute the minimum, using argmin.}
\usage{
getMin.argmin.LOO(
  i,
  r,
  data,
  lambda = NULL,
  sample.mean = NULL,
  ties.method = "random",
  seed = NULL,
  true.mean = NULL
)
}
\arguments{
\item{i}{An index of the sample to be left out.}

\item{r}{The dimension of interest for hypothesis test; excluded from the calculation of softmin.}

\item{data}{A n by p data matrix; each of its row is a p-dimensional sample.}

\item{lambda}{NULL; in-place to ease the implementation.}

\item{sample.mean}{The sample mean of the n samples in data; defaults to NULL. It can be calculated via colMeans(data).
If your experiment involves hypothesis testing over more than one dimension, pass sample.mean=colMeans(data) to speed up computation.}

\item{ties.method}{A string indicating the method to tackle with ties: 'average' (or simply 'a'), 'random' (or simple 'r); defaults to random.}

\item{seed}{An integer seed in case that 'random' is chosen to tackle with ties. If no value is given, the seed would be set to \eqn{i*r + 11}.}

\item{true.mean}{The population mean landscape; defaults to NULL. If a vector were provided, the random center of weighted sum would be outputted.
It is only useful for a simulation purpose.}
}
\value{
A list containing:\tabular{ll}{
   \code{Q} \tab The minimum calculated from argmin under the leave-one-out scheme with the r-th dimension excluded (The quantity Q in Zhang et al) \cr
   \tab \cr
   \code{Q.true.mean} \tab (Optional) The Q computed with the given true mean. Outputted only when true.mean is not NULL. \cr
}
}
\description{
Compute the minimum, using (hard)argmin, under the leave-one-out (LOO) scheme;
more specifically, the quantity Q in Zhang et al 2024.
}
\examples{
n <- 100
mu <- (1:10)/10
cov <- diag(length(mu))
set.seed(31)
data <- MASS::mvrnorm(n, mu, cov)
## let the function calculate the sample.mean
getMin.argmin.LOO(7, 1, data, sqrt(n))

## calculate the sample.mean outside the function.
## This may foster LOO implementation computation-wise
getMin.argmin.LOO(7, 1, data, sqrt(n), sample.mean=colMeans(data))
}
